//flatlist pull to refresh and load 5 item eaxh item when user scroll down 
import React, {useState, useEffect, useCallback} from 'react';
import {
  StyleSheet,
  Text,
  View,
  DimensionValue,
  Dimensions,
  BackHandler,
  StatusBar,
  Image,
  ScrollView,
  TouchableOpacity,
  RefreshControl,
  FlatList,
  Pressable,
  Linking,
  Alert,
  PermissionsAndroid,
  Platform,
  ActivityIndicator,
  TextInput,
} from 'react-native';
const {width, height} = Dimensions.get('window');
import {Colors} from '../../../styles/Theme';
import {Modal, Portal, Searchbar} from 'react-native-paper';
import MaterialIcons from 'react-native-vector-icons/MaterialIcons';
import AntDesign from 'react-native-vector-icons/AntDesign';
import DateTimePickerModal from 'react-native-modal-datetime-picker';

import Snackbar from 'react-native-snackbar';

const data = [
  {
    JobId: 1,
    CustomerName: 'Shobhana Bagaji',
    ServiceName: 'ICU 12hrs by 1 Female Nurse Service (D)',
    JobStart: '20/06/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 22,
    CustomerName: 'Amrish Vedak',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Closed',
  },
  {
    JobId: 322225,
    CustomerName: 'Sujeet Chauhan',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 2221,
    CustomerName: 'Shobhana Bagaji',
    ServiceName: 'ICU 12hrs by 1 Female Nurse Service (D)',
    JobStart: '20/06/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 2222,
    CustomerName: 'Amrish Vedak',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Closed',
  },
  {
    JobId: 3225,
    CustomerName: 'Sujeet Chauhan',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 122,
    CustomerName: 'Shobhana Bagaji',
    ServiceName: 'ICU 12hrs by 1 Female Nurse Service (D)',
    JobStart: '20/06/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 100,
    CustomerName: 'Shobhana Bagaji',
    ServiceName: 'ICU 12hrs by 1 Female Nurse Service (D)',
    JobStart: '20/06/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 202,
    CustomerName: 'Amrish Vedak',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Closed',
  },
  {
    JobId: 32005,
    CustomerName: 'Sujeet Chauhan',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 22021,
    CustomerName: 'Shobhana Bagaji',
    ServiceName: 'ICU 12hrs by 1 Female Nurse Service (D)',
    JobStart: '20/06/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 2023,
    CustomerName: 'Amrish Vedak',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Closed',
  },
  {
    JobId: 32025,
    CustomerName: 'Sujeet Chauhan',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 1202,
    CustomerName: 'Shobhana Bagaji',
    ServiceName: 'ICU 12hrs by 1 Female Nurse Service (D)',
    JobStart: '20/06/2023',
    JobStatus: 'Open',
  },
  {
    JobId: 222,
    CustomerName: 'Amrish Vedak',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Closed',
  },
  {
    JobId: 352,
    CustomerName: 'Sujeet Chauhan',
    ServiceName: 'PCT 12hrs by 1 Attendant Night	',
    JobStart: '29/04/2023',
    JobStatus: 'Open',
  },
];

export default function JobListing({navigation}) {
 

  const [showModal, setShowModal] = useState(false);
  const [searchText, setSearchText] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [refreshing, setRefreshing] = useState(false);
  const [searchLoading, setSearchLoading] = useState(false);
  const [extraDataLoading, setExtraDataLoading] = useState(false);
  const [openSelectedState, setOpenSelectedState] = useState('');
  const [closedSelectedState, setClosedSelectedState] = useState('');
  const [allSelectedState, setAllSelectedState] = useState('');
  const [showUpdateModal, setShowUpdateModal] = useState(false);
  const [isDatePickerVisible, setDatePickerVisibility] = useState(false);
  const [currentPage, setCurrentPage] = useState(1); // Track the current page
  const [isLoading, setIsLoading] = useState(false); // Loading indicator
  const [allItemsLoaded, setAllItemsLoaded] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const itemsPerPage = 5;

  function handleBackButtonClick() {
    navigation.goBack();
    return true;
  }

  useEffect(() => {
    BackHandler.addEventListener('hardwareBackPress', handleBackButtonClick);
    return () => {
      BackHandler.removeEventListener(
        'hardwareBackPress',
        handleBackButtonClick,
      );
    };
  }, []);

  useEffect(() => {
    loadMoreData();
  }, []);

  const loadMoreData = () => {
    if (!isLoading && !allItemsLoaded) {
      setIsLoading(true);
      setTimeout(() => {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const newData = data?.slice(startIndex, endIndex);
        console.log("index :",endIndex)
        setSearchResults((prevResults) => [...prevResults, ...newData]);
        if (endIndex >= data?.length) {
          setAllItemsLoaded(true);
          setIsLoading(false);
        } else {
          setIsLoading(false);
          setCurrentPage((prevPage) => prevPage + 1);
        }
      }, 1000); 
    }
  };
  const renderFooter = () => {
    if (isLoading) {
      return (
        <View style={{paddingVertical: 20}}>
          <ActivityIndicator size="large" color="#000" />
        </View>
      );
    } else if (searchResults?.length === data?.length) {
      return (
        <View style={{paddingVertical: 20}}>
          <Text>No more data .</Text>
        </View>
      );
    } else {
      return null;
    }
  };

  const handleRefresh = () => {
      setIsRefreshing(true);
      setTimeout(() => {
        const endIndex = Math.min(10, data?.length); // Load up to 10 items
        const newData = data?.slice(0, endIndex);
        setSearchResults(newData);
        setCurrentPage(1);
        setAllItemsLoaded(false);
        setIsRefreshing(false);
      }, 1000);
  };

  const handleSearch = async text => {
    if (text) {
      setSearchLoading(true);
      await searchItem(text);
      setTimeout(() => {
        setSearchLoading(false);
      }, 1500);
    } else {
      setSearchText('');
      setSearchLoading(false);
      setSearchResults(data);
    }
  };

  const searchItem = async text => {
    const filtered = data?.filter(item => {
      const searchString = text.toLowerCase();
      const jobIdMatch = item?.JobId.toString().includes(searchString);
      const customeNameMatch =
        item?.CustomerName.toLowerCase().includes(searchString);
      const serviceNameMatch =
        item?.ServiceName.toLowerCase().includes(searchString);
      const jobStatusMatch =
        item?.JobStatus?.toLowerCase().includes(searchString);
      return (
        jobIdMatch || customeNameMatch || serviceNameMatch || jobStatusMatch
      );
    });
    setSearchText(text);
    setSearchResults(filtered);
  };

  const toggleOptionSelection = (option, value) => {
    switch (option) {
      case 'Open':
        setOpenSelectedState(prevValue => (prevValue === value ? '' : value));
        break;
      case 'Closed':
        setClosedSelectedState(prevValue => (prevValue === value ? '' : value));
        break;
      case 'All':
        setAllSelectedState(prevValue => (prevValue === value ? '' : value));
        break;
      default:
        break;
    }
  };

  const options = [
    {label: 'Open', value: 'Open'},
    {label: 'Closed', value: 'Closed'},
    {label: 'All', value: 'All'},
  ];

  const filterList = () => {
    if (
      openSelectedState == '' &&
      closedSelectedState == '' &&
      allSelectedState == ''
    ) {
      setSearchResults(data);
      setShowModal(false);
    } else {
      if (allSelectedState == '') {
        const filterData = data.filter(item => {
          const openSelectedStateMatch = openSelectedState?.toLowerCase() == 'open' && item?.JobStatus?.toLowerCase() == 'open';
          const closedSelectedStateMatch = closedSelectedState?.toLowerCase() == 'closed'&& item?.JobStatus?.toLowerCase() == 'closed';

          return openSelectedStateMatch || closedSelectedStateMatch;
        });
        // setSearchResults(filterData?.slice(0, currentPage * pageSize));
        setSearchResults(filterData);
        setShowModal(false);
      } else {
        setSearchResults(data);
        setShowModal(false);
      }
    }
  };
  const renderGetAllJobListing = ({item, index}) => {
    return (
      <TouchableOpacity
        style={styles.profileMainContainer}
        activeOpacity={0.75}>
        <View style={styles.profileContainer}>
          <View style={styles.profileDescContainer}>
            <Text style={styles.profileNameText} numberOfLines={2}>
              {item?.CustomerName}
            </Text>
            <View style={styles.cityContainer}>
              <Image
                source={require('../../../Assets/Images/service-icon.png')}
                style={{width: 20, height: 20, tintColor: '#000'}}
              />
              <Text
                numberOfLines={2}
                style={{width: width * 0.7, marginStart: 7, color: 'grey'}}>
                {item?.ServiceName}
              </Text>
            </View>
            <View style={styles.cityContainer}>
              <Image
                source={require('../../../Assets/Images/attendance-date.png')}
                style={{width: 20, height: 20, tintColor: '#000'}}
              />
              <Text
                numberOfLines={2}
                style={{width: width * 0.7, marginStart: 7, color: 'grey'}}>
                {item?.JobStart}
              </Text>
            </View>
            <View style={styles.cityContainer}>
              <Image
                source={require('../../../Assets/Images/job-id.png')}
                style={{
                  width: 20,
                  height: 20,
                  tintColor: '#000',
                }}
              />
              <Text
                numberOfLines={2}
                style={{
                  marginStart: 7,
                  color: 'grey',
                }}>
                {item?.JobId}
              </Text>
            </View>
            <View style={styles.cityContainer}>
              <Image
                source={require('../../../Assets/Images/job-status.png')}
                style={{
                  width: 20,
                  height: 20,
                  tintColor:
                    item?.JobStatus?.toLowerCase() == 'open' ? 'green' : 'red',
                }}
              />
              <Text
                numberOfLines={2}
                style={{
                  marginStart: 7,
                  color:
                    item?.JobStatus?.toLowerCase() == 'open' ? 'green' : 'red',
                }}>
                {item?.JobStatus}
              </Text>
            </View>
          </View>
        </View>
        <TouchableOpacity></TouchableOpacity>
        <TouchableOpacity
          style={{
            position: 'absolute',
            bottom: 10,
            right: 10,
            width: 80,
            height: undefined,
            borderRadius: 10,
            flexDirection: 'row',
            justifyContent: 'space-around',
            alignSelf: 'center',
            alignItems: 'center',
            backgroundColor: Colors.primaryColor,
            padding: 5,
          }}
          onPress={() => {
            setShowUpdateModal(true);
          }}>
          <Image
            source={require('../../../Assets/Images/job-update.png')}
            style={{
              width: 20,
              height: 20,
              tintColor: '#fff',
            }}
          />
          <Text style={{color: '#fff'}}>Update</Text>
        </TouchableOpacity>
      </TouchableOpacity>
    );
  };

  const showDatePicker = () => {
    setDatePickerVisibility(true);
  };

  const hideDatePicker = () => {
    setDatePickerVisibility(false);
  };

  const handleConfirm = date => {
    const dateData = date?.toISOString().toString()?.split('T')[0];
    console.log(
      'dateTime',
      typeof date,
      date.toISOString().toString()?.split('T')[0],
    );
    // setSelectedDate(formattedDateTime?.toLocaleUpperCase());
    hideDatePicker();
  };

  return (
    <View style={styles.container}>
      <StatusBar
        backgroundColor={Colors.primaryColor}
        barStyle={'light-content'}
      />
      <View style={styles.searchBarContainer}>
        <Searchbar
          placeholder="Search..."
          value={searchText}
          onChangeText={text => {
            handleSearch(text);
          }}
          mode="bar"
          style={styles.search}
          placeholderTextColor="#000000"
          iconColor="#000"
          inputStyle={{color: Colors.darkTextColor, fontSize: 16}}
        />
        <View style={{position: 'absolute', top: 32, right: 105, zIndex: 999}}>
          {searchLoading && (
            <ActivityIndicator size={'small'} color={Colors.darkTextColor} />
          )}
        </View>
        <TouchableOpacity
          onPress={() => {
            setShowModal(true);
          }}>
          <Image
            source={require('../../../Assets/Images/filter.png')}
            style={styles.filterIconImage}
          />
        </TouchableOpacity>
      </View>
      {false ? (
        <View
          style={{
            width: '100%',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 999,
            backgroundColor: 'rgba(255,255,255,0.75)',
            paddingVertical: 10,
          }}>
          <ActivityIndicator size={'large'} color={Colors.primaryColor} />
        </View>
      ) : null}
      {false ? (
        <View
          style={{
            width: '100%',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 999,
            backgroundColor: 'rgba(255,255,255,0.75)',
            paddingVertical: 10,
          }}>
          <ActivityIndicator size={'large'} color={Colors.primaryColor} />
        </View>
      ) : null}
      <FlatList
        data={searchResults}
        renderItem={renderGetAllJobListing}
        keyExtractor={(item, index) => {
          return index;
        }}
        ItemSeparatorComponent={() => {
          return (
            <View
              style={{
                width: '100%',
                height: 1,
                backgroundColor: '#d3d3d3',
              }}
            />
          );
        }}
        ListFooterComponent={renderFooter} 
        onEndReached={loadMoreData}
        onEndReachedThreshold={0.1}
        extraData={data}
        refreshControl={
          <RefreshControl
            refreshing={isRefreshing}
            onRefresh={handleRefresh}
          />
        }
      />
      <DateTimePickerModal
        isVisible={isDatePickerVisible}
        mode="date"
        onConfirm={handleConfirm}
        onCancel={hideDatePicker}
      />
      <Portal>
        <Modal
          contentContainerStyle={{
            position: 'absolute',
            bottom: 0,
            width: '100%',
            height: height * 0.35,
            backgroundColor: '#fff',
          }}
          onDismiss={() => setShowModal(false)}
          visible={showModal}>
          <ScrollView
            contentContainerStyle={{width: width, height: height * 0.355}}>
            <View style={{position: 'absolute', top: 5, width: width}}>
              <View style={{padding: 15}}>
                <View
                  style={{
                    borderBottomWidth: 2,
                    paddingBottom: 5,
                    borderBottomColor: '#000',
                  }}>
                  <Text
                    style={{
                      fontSize: 17,
                      fontWeight: '700',
                      color: 'black',
                      textAlign: 'center',
                    }}>
                    Sort by
                  </Text>
                </View>
                {options.map(option => (
                  <TouchableOpacity
                    key={option.label}
                    style={{
                      padding: 10,
                      marginVertical: 3,
                      backgroundColor:
                        option.value === openSelectedState ||
                        option.value === closedSelectedState ||
                        option.value === allSelectedState
                          ? Colors.primaryColor
                          : '#fff',
                    }}
                    onPress={() =>
                      toggleOptionSelection(option.label, option.value)
                    }>
                    <Text
                      style={{
                        fontWeight:
                          option.value === openSelectedState ||
                          option.value === closedSelectedState ||
                          option.value === allSelectedState
                            ? '700'
                            : '400',
                        color:
                          option.value === openSelectedState ||
                          option.value === closedSelectedState ||
                          option.value === allSelectedState
                            ? '#fff'
                            : 'black',
                        fontSize: 15,
                      }}>
                      {option.label}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          </ScrollView>
          <TouchableOpacity
            style={{
              position: 'absolute',
              backgroundColor: Colors.primaryColor,
              bottom: 10,
              right: 10,
              width: 75,
              height: undefined,
              padding: 10,
              borderRadius: 2,
            }}
            onPress={filterList}>
            <Text style={{color: '#fff', fontSize: 16, fontWeight: '700'}}>
              Submit
            </Text>
          </TouchableOpacity>
        </Modal>
        <Modal
          contentContainerStyle={{
            width: '95%',
            height: undefined,
            backgroundColor: '#fff',
            alignSelf: 'center',
            padding: 10,
          }}
          onDismiss={() => setShowUpdateModal(false)}
          visible={showUpdateModal}>
          <View
            style={{
              width: '95%',
              alignSelf: 'center',
            }}>
            <Text style={styles.title}>
              Job ID <Text style={{color: 'red'}}>*</Text>
            </Text>
            <View style={{flexDirection: 'row'}}>
              <TextInput
                placeholder="Job ID"
                style={{
                  borderWidth: 1,
                  borderColor: Colors.primaryColor,
                  paddingHorizontal: 10,
                  borderRadius: 5,
                  width: '100%',
                  height: 40,
                  color: '#000',
                  fontWeight: '300',
                }}
                keyboardType="numeric"
              />
            </View>
          </View>
          <View
            style={{
              width: '95%',
              alignSelf: 'center',
            }}>
            <Text style={styles.title}>
              Customer Name <Text style={{color: 'red'}}>*</Text>
            </Text>
            <View style={{flexDirection: 'row'}}>
              <TextInput
                placeholder="Customer Name"
                style={{
                  borderWidth: 1,
                  borderColor: Colors.primaryColor,
                  paddingHorizontal: 10,
                  borderRadius: 5,
                  width: '100%',
                  height: 40,
                  color: '#000',
                  fontWeight: '300',
                }}
                keyboardType="numeric"
              />
            </View>
          </View>
          <View
            style={{
              width: '95%',
              alignSelf: 'center',
            }}>
            <Text style={styles.title}>
              Service Name <Text style={{color: 'red'}}>*</Text>
            </Text>
            <View style={{flexDirection: 'row'}}>
              <TextInput
                placeholder="Service Name"
                style={{
                  borderWidth: 1,
                  borderColor: Colors.primaryColor,
                  paddingHorizontal: 10,
                  borderRadius: 5,
                  width: '100%',
                  height: 40,
                  color: '#000',
                  fontWeight: '300',
                }}
                keyboardType="numeric"
              />
            </View>
          </View>
          <TouchableOpacity
            style={{
              width: '95%',
              alignSelf: 'center',
            }}
            onPress={showDatePicker}>
            <Text style={styles.title}>
              Job start date <Text style={{color: 'red'}}>*</Text>
            </Text>
            <View style={{flexDirection: 'row'}}>
              <TextInput
                placeholder="Job start date"
                style={{
                  borderWidth: 1,
                  borderColor: Colors.primaryColor,
                  paddingHorizontal: 10,
                  borderRadius: 5,
                  width: '100%',
                  height: 40,
                  color: '#000',
                  fontWeight: '300',
                }}
                editable={false}
              />
            </View>
          </TouchableOpacity>

          <View
            style={{
              width: '95%',
              alignSelf: 'center',
            }}>
            <Text style={styles.title}>
              Job Status <Text style={{color: 'red'}}>*</Text>
            </Text>
            <View style={{flexDirection: 'row'}}>
              <TextInput
                placeholder="Job Status"
                style={{
                  borderWidth: 1,
                  borderColor: Colors.primaryColor,
                  paddingHorizontal: 10,
                  borderRadius: 5,
                  width: '100%',
                  height: 40,
                  color: '#000',
                  fontWeight: '300',
                }}
                keyboardType="numeric"
              />
            </View>
          </View>
          <View>
            <TouchableOpacity activeOpacity={0.7} style={styles.largeBtn}>
              <Text style={styles.btnTitle}>Submit</Text>
            </TouchableOpacity>
          </View>
        </Modal>
      </Portal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  searchBarContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    alignItems: 'center',
    width: '100%',
    backgroundColor: Colors.secondaryColor,
    paddingBottom: 10,
    zIndex: 1,
  },
  search: {
    backgroundColor: '#fff',
    width: '85%',
    borderRadius: 10,
    alignSelf: 'center',
    zIndex: 999,
    marginStart: 10,
  },
  filterIconImage: {
    resizeMode: 'contain',
    width: width * 0.15,
    height: height * 0.1,
    tintColor: '#000',
  },

  profileMainContainer: {
    width: '100%',
    height: undefined,
    paddingHorizontal: 10,
    backgroundColor: '#fff',
  },
  profileContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    paddingBottom: 10,
  },
  profileDescContainer: {
    width: '95%',
    marginLeft: 10,
    marginTop: 2,
  },
  profileNameText: {
    fontSize: 16,
    color: '#000',
    fontWeight: '600',
    textTransform: 'capitalize',
    marginTop: 5,
  },
  cityContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    width: width * 0.9,
    marginVertical: 3,
  },
  btnContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: Colors.primaryColor,
    borderRadius: 5,
    padding: 8,
    width: '95%',
    marginTop: 5,
  },
  btnTitle: {
    color: Colors.secondaryColor,
    textAlign: 'center',
    marginStart: 5,
  },
  toggleBtn: {
    alignSelf: 'center',
    flexDirection: 'row',
    marginVertical: 3,
  },
  subtitles: {
    fontSize: 16,
    fontWeight: '500',
    color: Colors.darkTextColor,
  },
  title: {
    fontSize: 15,
    fontWeight: '300',
    color: Colors.darkTextColor,
    paddingVertical: 5,
  },
  largeBtn: {
    backgroundColor: Colors.primaryColor,
    width: '100%',
    height: 45,
    padding: 10,
    borderRadius: SCALE_10,
    justifyContent: 'center',
    alignItems: 'center',
    marginVertical: SCALE_15,
  },
});
